name: Build FullMoon iOS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Install iOS Platform
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        xcodebuild -downloadPlatform iOS || true
        
    - name: Resolve Dependencies
      run: |
        xcodebuild -resolvePackageDependencies -project fullmoon.xcodeproj
        
    - name: Setup Signing & Provisioning
      run: |
        # Keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -lut 21600 build.keychain

        # Install distribution certificate and key (separate PEM files)
        echo "${{ secrets.DISTRIBUTION_CERT }}" | base64 --decode > cert.pem
        echo "${{ secrets.DISTRIBUTION_KEY }}" | base64 --decode > key.pem

        # Import certificate and key separately
        security import cert.pem -k build.keychain -T /usr/bin/codesign -A
        security import key.pem -k build.keychain -T /usr/bin/codesign -A

        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

        # API Key file
        mkdir -p ~/private_keys
        echo "${{ secrets.ASC_PRIVATE_KEY }}" > ~/private_keys/AuthKey_${{ secrets.ASC_KEY_ID }}.p8

        # Install provisioning profile from secrets
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/fullmoon.mobileprovision

        echo "Provisioning profile installed:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

        echo "Certificates in keychain:"
        security find-identity -v -p codesigning build.keychain

        # ExportOptions.plist with manual signing for export
        PROFILE_UUID=$(grep -a -A1 "<key>UUID</key>" ~/Library/MobileDevice/Provisioning\ Profiles/fullmoon.mobileprovision | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        BUNDLE_ID="com.github.$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]' | tr '/' '.')"

        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>$BUNDLE_ID</key>
                <string>$PROFILE_UUID</string>
            </dict>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>signingStyle</key>
            <string>manual</string>
        </dict>
        </plist>
        EOF

        echo "ExportOptions.plist created with profile UUID: $PROFILE_UUID"
        
    - name: Disable AppIntents (temporary fix)
      run: |
        # Renomear o arquivo problemático para que não seja compilado
        mv fullmoon/Models/RequestLLMIntent.swift fullmoon/Models/RequestLLMIntent.swift.bak || true
        echo "AppIntents disabled for build"
        
    - name: Build & Archive
      run: |
        # Generate dynamic bundle ID
        BUNDLE_ID="com.github.$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]' | tr '/' '.')"
        echo "Bundle ID: $BUNDLE_ID"

        # Build with automatic signing - manual signing happens in export
        xcodebuild \
          -project fullmoon.xcodeproj \
          -scheme fullmoon \
          -sdk iphoneos \
          -configuration Release \
          -archivePath fullmoon.xcarchive \
          CODE_SIGN_STYLE=Automatic \
          DEVELOPMENT_TEAM=${{ secrets.TEAM_ID }} \
          PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
          archive
          
    - name: Diagnose Certificates & Provisioning
      run: |
        echo "=== KEYCHAIN STATUS ==="
        security list-keychains
        security default-keychain

        echo -e "\n=== CERTIFICATES IN KEYCHAIN ==="
        security find-identity -v -p codesigning build.keychain || true

        echo -e "\n=== PROVISIONING PROFILES ==="
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || true

        echo -e "\n=== ARCHIVE CONTENTS ==="
        ls -la fullmoon.xcarchive/
        ls -la fullmoon.xcarchive/Products/Applications/ || true

        echo -e "\n=== AVAILABLE EXPORT METHODS ==="
        xcodebuild -exportArchive -archivePath fullmoon.xcarchive -exportPath ./test-export -exportOptionsPlist /dev/null 2>&1 || true

    - name: Export IPA
      run: |
        # Export with manual signing using ExportOptions.plist
        xcodebuild \
          -exportArchive \
          -archivePath fullmoon.xcarchive \
          -exportPath ./output \
          -exportOptionsPlist ExportOptions.plist

        echo "IPA exported: $(ls -la ./output/*.ipa)"
          
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: FullMoon-${{ github.sha }}
        path: "./output/*.ipa"
        retention-days: 30

    - name: Upload to TestFlight
      if: github.ref == 'refs/heads/main'
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: ./output/fullmoon.ipa
        issuer-id: ${{ secrets.ASC_ISSUER_ID }}
        api-key-id: ${{ secrets.ASC_KEY_ID }}
        api-private-key: ${{ secrets.ASC_PRIVATE_KEY }}
